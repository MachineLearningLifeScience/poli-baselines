[build-system]
requires = ["setuptools<=68"]
build-backend = "setuptools.build_meta"

[project]
name = "poli-baselines"
version = "1.0.0"
description = "poli-baselines, a library of discrete objective optimizers"
readme = "README.md"
authors = [{name="Miguel González-Duque", email="miguelgondu@gmail.com"}]
license = {file = "LICENSE"}
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["optimization", "molecular", "discrete", "proteins"]
dependencies = [
    "numpy",
    "rdkit",
    "selfies",
    "pymoo",
    "botorch",
    "cma",
    "poli-core @ git+https://github.com/MachineLearningLifeScience/poli.git",
]
requires-python = ">=3.10"

[project.optional-dependencies]
dev = ["black", "tox", "pytest"]
docs = ["sphinx", "furo"]
alebo = [
    "scikit-learn",
    "ax-platform==0.4.0",
]
baxus = [
    "baxus",
]
ax = [
    "ax-platform",
]
saasbo = [
    "ax-platform"
]
vanilla_bo = [
    "ax-platform"
]
pr = [
    "torch",
    "gpytorch==1.11",
    "botorch==0.7.0",
    "scipy",
    "jupyter",
    "matplotlib",
    "nevergrad",
    "scikit-learn",
    "statsmodels",
    "xgboost",
    "black",
    "bo_pr @ git+https://github.com/miguelgondu/bo_pr.git@main"
]
bounce = [
    "torch==2.0.0",
    "botorch>=0.8.2,<0.9.0",
    "gin-config>=0.5.0,<0.6.0",
    "pandas>=1.5.3,<1.6.0",
    "xgboost>=1.7.5,<1.8.0",
    "coverage>=7.2.5,<7.3.0",
    "requests>=2.31.0,<2.32.0",
    "black>=22.12.0,<22.13.0",
    "memray>=1.6.0,<1.7.0",
    "pytest>=7.3.1,<7.4.0",
    "bounce @ git+https://github.com/miguelgondu/bounce.git@main"
]
lambo2 = ["pytorch-cortex", "beignet"]

[project.urls]
Homepage = "https://github.com/MachineLearningLifeScience/poli-baselines"

[tool.pytest.ini_options]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "baxus: marks test that can be run in the BAxUS environment",
    "ax_solvers: marks test that can be run in the Ax environment",
]

[tool.isort]
profile = "black"

[tool.bumpversion]
current_version = "1.0.0"
parse = """(?x)
    (?P<major>0|[1-9]\\d*)\\.
    (?P<minor>0|[1-9]\\d*)\\.
    (?P<patch>0|[1-9]\\d*)
    (?:
        .                             # dash separator for pre-release section
        (?P<pre_l>[a-zA-Z-]+)         # pre-release label
        (?P<pre_n>0|[1-9]\\d*)        # pre-release version number
    )?                                # pre-release section is optional
"""
serialize = [
    "{major}.{minor}.{patch}.{pre_l}{pre_n}",
    "{major}.{minor}.{patch}",
]
search = 'current_version = "{current_version}"'
replace = 'current_version = "{new_version}"'
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = false
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = false
message = "Bump version: {current_version} → {new_version}"
commit_args = ""

[tool.bumpversion.parts.pre_l]
values = ["dev"]

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[[tool.bumpversion.files]]
filename = "src/poli_baselines/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

[[tool.bumpversion.files]]
filename = "setup.cfg"
search = 'version = {current_version}'
replace = 'version = {new_version}'
